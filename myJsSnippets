{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"addEventListener": {
		"scope": "javascript,typescript",
		"prefix": "adee",
		"body": [
			"addEventListener('$1', $2 => {",
			"\t$3",
			"});"
		],
		"description": "addEventListener to variable"
	},
	"has class": {
		"scope": "javascript,typescript",
		"prefix": "hsc",
		"body": [
			"classList.contains('$1')$2"
		],
		"description": "has class"
	},
	"add class": {
		"scope": "javascript,typescript",
		"prefix": "adc",
		"body": [
			"classList.add('$1')$2"
		],
		"description": "add class"
	},
	"remove class": {
		"scope": "javascript,typescript",
		"prefix": "rmc",
		"body": [
			"classList.remove('$1')"
		],
		"description": "remove class"
	},
	"forEach": {
		"scope": "javascript,typescript",
		"prefix": "foreach",
		"body": [
			"forEach($1 => {",
			"\t$2"
			"})"
		],
		"description": "forEach"
	},
	"if enter": {
		"scope": "javascript,typescript",
		"prefix": "ifent",
		"body": [
			"if(key === 13){",
			"\t$1 ",
			"}",
			"$2"
		],
		"description": "if enter"
	},
	"forEach": {
		"scope": "javascript,typescript",
		"prefix": "forEach",
		"body": [
			"forEach($1 => {",
			"\t$2"
			"})"
		],
		"description": "forEach"
	},
	"getparent'": {
		"scope": "javascript,typescript",
		"prefix": "getparent",
		"body": [
		"function get$1(parent){",
		"\tif(parent.classList.contains('$2')){",
			"\t\treturn parent",
		"\t} else if (parent.parentElement){",
			"\t\treturn get$1(parent.parentElement)",
		"\t} else {",
			"\t\treturn null",
		"\t}",
		"}" 
		],
		"description": "if enter"
	},
	"let key'": {
		"scope": "javascript,typescript",
		"prefix": "letkey",
		"body": [
			"let key = e.keyCode",
		],
		"description": "let key"
	},
	"let letter	'": {
		"scope": "javascript,typescript",
		"prefix": "letlet",
		"body": [
			"let letter = e.key.toLowerCase()",
		],
		"description": "let letter"
	},
	"query '": {
		"scope": "javascript,typescript",
		"prefix": "qry",
		"body": [
			"document.querySelector('$1')",
		],
		"description": "querySelector"
	},
	"query all'": {
		"scope": "javascript,typescript",
		"prefix": "qrya",
		"body": [
			"document.querySelectorAll('$1')",
		],
		"description": "querySelectorAll"
	},
	"if ent'": {
		"scope": "javascript,typescript",
		"prefix": "ifent",
		"body": [
			"if(key == 13){",
			"\t$1",
			"}",
			"$2"
		],
		"description": "if ent"
	},
	"if letter'": {
		"scope": "javascript,typescript",
		"prefix": "iflet",
		"body": [
			"if(letter == $1){",
			"\t$2",
			"}",
			"$3"
		],
		"description": "if ent"
	}


}